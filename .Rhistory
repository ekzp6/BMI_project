dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Mice = a vector of mouse identifiers
mice <- paste0("MB", c(0:6, 10, 13, 15))
# Mice = a vector of mouse identifiers
mice <- c(paste0("MB", c(5, 6, 10, 13, 15)),paste0("WT",c(1:5))
# Mice = a vector of mouse identifiers
mice <- c(paste0("MB", c(5, 6, 10, 13, 15)),paste0("WT",c(1:5)))
# Mice = a vector of mouse identifiers
mice <- c(paste0("MB", c(5, 6, 10, 13, 15)),paste0("WT",c(1:5))
# Mice = a vector of mouse identifiers
mice <- c(paste0("MB", c(5, 6, 10, 13, 15)),paste0("WT",c(1:5)))
# Mice = a vector of mouse identifiers
mice <- c(paste0("MB", c(5, 6, 10, 13, 15)),paste0("WT",c(1:5)))
View(mice)
# Mice = a vector of mouse identifiers
mice <- c(paste0("MB", c(05, 06, 10, 13, 15)),paste0("WT",c(01:05)))
View(mice)
# Source a few pre-written functions for later (PCA selection, ANOVA testing, etc.)
source("C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/SingleCell.Utilities.R")
# seurats = an empty list (will contain objects)
seurats <- list()
# Establish base variables for importing cells. This is to lighten the Seurat object if any very low-read cells were included below the knee. In this sample no cells were excluded from the matrix at this step.
min.genes <- 10
min.cells <- 0
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('MB_mouse_gene_data/', i, '.dge'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('MB_mouse_gene_data/', i, '.dge'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/', i, '.dge'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/', i, '.dge.txt'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/', i, '.dge.txt'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes, counts=3000)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/', i, '.dge.txt'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes, counts=3000)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
View(fonts)
WT01 <- fread('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/WT1.dge.txt')
View(WT01)
rownames(WT01)
colnames(WT01)
WT01$counts
WT01$count
WT01$gene
print(WT01)
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- fread(paste0('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/', i, '.dge.txt'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
# rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes, counts=3000)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
colnames(WT01)
# Function to import expression matrix, generate seurat object and return object with mouse sample ID set as "replicate" identity class
prep.Seurat <- function(i){
message('Starting with Sample ', i)
df <- read.delim(paste0('C:/Users/ylime/Documents/BIDs/data_processing/Gershon_single-cell-master/MB_mouse_gene_data/', i, '.dge.txt'),
stringsAsFactors = F,
data.table = F, sep = "\t", header = T)
# rownames(df) <- df$GENE
df$GENE <- NULL
colnames(df) <- paste(as.character(i), colnames(df), sep="_")
dat <- CreateSeuratObject(raw.data = df,
min.cells = min.cells,
min.genes = min.genes, counts=3000)
dat <- StashIdent(object = dat,
save.name = "Replicate")
return(dat)
}
# Applying the above function to each mouse ID and storing the output Seurats as a list
seurats <- lapply(mice, function(x) prep.Seurat(x))
print(WT01)
library(Keras)
install.packages("Keras")
install.packages("keras")
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
install_tensorflow()
install_TensorFlow()
vinegette(tibble)
vignette("tibble")
raw_data <- read_excel('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
raw_data <- read.excel('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
raw_data <- read_xlsx('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
raw_data <- read.xlsx('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
library(affy)
library(gcrma)
library(preprocessCore)
library(affyPLM)
raw_data <- read_excel('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
library(tidyverse)
raw_data <- read_excel('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
raw_data <- read.xlsx('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
library(xlsx)
raw_data <- read.xlsx('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
library(xlsx)
install.packages("xlsx")
library(xlsx)
raw_data <- read.xlsx('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx')
raw_data <- read.xlsx('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.xlsx',1)
raw_data <- read.table('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.csv',delim = "\t")
raw_data <- read.table('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/Preprocessed.csv')
raw_data <- read.table('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/Preprocessed.csv')
raw_data <- read.table('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/Preprocessed.txt')
raw_data <- read.table('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/Preprocessed.txt',delin = "\t")
raw_data <- read.table('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/Preprocessed.txt',delim = "\t")
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/Preprocessed.txt',delim = "\t")
View(raw_data)
View(raw_data)
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/labeled.txt',delim = "\t")
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/merged_data.txt',delim = "\t")
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/merged_data.txt',delim = "\t")
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/merged_data.txt',delim = "\t")
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/merged_data.txt',delim = "\t")
View(raw_data)
raw_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/annotated_sample',delim = "\t")
annotation <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/annotated_sample.txt',delim = "\t")
annotation <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/sample_annotation.txt',delim = "\t")
View(annotation)
lapply(annotation)
merged_data <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/merged_data/merged_data.txt',delim = "\t")
View(merged_data)
data1 <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/raw_data-txt/raw_data1.txt',delim = "\t")
data2 <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/raw_data-txt/raw_data2.txt',delim = "\t")
data3 <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/raw_data-txt/raw_data3.txt',delim = "\t")
data4 <- read_delim('C:/Users/ylime/Documents/FS20/BMI_intro/project/BMI_project/raw_data-txt/raw_data4.txt',delim = "\t")
samples1 <- annation[annotation["File"] == 1]
samples1 <- annotion[annotation["File"] == 1]
samples1 <- annotation[annotation["File"] == 1]
samples1 <- annotation[annotation[,"File"] == 1]
samples1 <- annotation[annotation["File",] == 1]
samples1 <- filter(annotation$File == 1)
samples1 <- filter(annotation, annotation$File == 1)
data1 <-  merge(data1,samples1,by="Block")
View(data1)
View(data1)
colnames(data1)
data1$`Samples ID`
samples2 <- filter(annotation, annotation$File == 2)
samples3 <- filter(annotation, annotation$File == 3)
samples4 <- filter(annotation, annotation$File == 4)
data2 <-  merge(data2,samples2,by="Block")
data3 <-  merge(data3,samples3,by="Block")
data4 <-  merge(data4,samples4,by="Block")
merged_data <- c(data1,data2,data3,data4)
View(merged_data)
merged_data <- bind_rows(c(data1,data2,data3,data4))
merged_data <- append(c(data1,data2,data3,data4))
merged_data <- append(data1,data2,data3,data4)
merged_data <- rbind(data1,data2,data3,data4)
View(merged_data)
merged_IgG <- read_delim('merged_data/merged_IgG.txt',delim = "\t")
setwd("~/FS20/BMI_intro/project/BMI_project")
merged_IgG <- as_tibble(data[,c('Samples ID','F532 Median - B532','Name','spotID')])
library(tidyverse)
library(limma)
library(Glimma)
library(edgeR) #install with BiocManager
library(genefilter)
merged_IgG <- as_tibble(data[,c('Samples ID','F532 Median - B532','Name','spotID')])
# ------------------------------------------------File Import
### Data acquisition and formating
annotation <- read_delim('raw_data-GPR/Targets.txt',delim = "\t")
View(annotation)
samples1 <- filter(annotation,annotation$File == 1)
samples2 <- filter(annotation,annotation$File == 2)
samples3 <- filter(annotation,annotation$File == 3)
samples4 <- filter(annotation,annotation$File == 4)
data1 <- read_delim('raw_data-txt/raw_data1.txt',delim = "\t")
data2 <- read_delim('raw_data-txt/raw_data2.txt',delim = "\t")
data3 <- read_delim('raw_data-txt/raw_data3.txt',delim = "\t")
data4 <- read_delim('raw_data-txt/raw_data4.txt',delim = "\t")
data1 <-  merge(data1,samples1,by="Block")
data2 <-  merge(data2,samples2,by="Block")
data3 <-  merge(data3,samples3,by="Block")
data4 <-  merge(data4,samples4,by="Block")
merged_data <- as_tibble(rbind(data1,data2,data3,data4))
merged_IgG <- as_tibble(data[,c('Samples ID','F532 Median - B532','Name','spotID')])
View(merged_data)
lapply(merged_data,class)
merged_IgG <- as_tibble(data[,c('Samples ID','F532 Median - B532','Name')])
merged_IgG <- as_tibble(data[c('Samples ID','F532 Median - B532','Name')])
merged_IgG <- as_tibble(merged_data[c('Samples ID','F532 Median - B532','Name')])
merged_IgM <- as_tibble(merged_data[c('Samples ID','F635 Median - B635','Name')])
# -------------------------------------------------generation of figures
### Visualizing Quality Control of Normalized Data
boxplot(`F532 Median - B532`~`Samples ID`,merged_data,
main = "Normalized IgG binding")
boxplot(`F635 Median - B635`~`Samples ID`,merged_data,
main = "Normalized IgM binding")
summary(merged_data$Description)
values(merged_data$Description)
distinct(merged_data$Description)
distinct(merged_data$Description)
View(merged_data)
merged_data$Description
avgCOVID_IgG <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F532 Median - B532`))
View(avgCOVID_IgG)
avgCOVID_IgM <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635`))
View(annotation)
avgControl_IgG <- as_tibble(filter(merged_data,`Description`=="Control")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F532 Median - B532`))
# making box plots
boxplot(`F532 Median - B532`~`Samples ID`,c(avgControl_IgG,avgControl_IgG),
main = "Normalized IgG binding")
View(avgControl_IgG)
# making box plots
boxplot(`Name`~`avg`,c(avgControl_IgG,avgControl_IgG),
main = "Normalized IgG binding")
# making box plots
boxplot(`Name`,c(avgControl_IgG,avgControl_IgG),
main = "Normalized IgG binding")
# making box plots
boxplot(avgCOVID_IgG,
main = "Normalized IgG binding")
# making box plots
boxplot(avgCOVID_IgG)
# making box plots
boxplot(avgCOVID_IgG$avg)
# making box plots
boxplot(c(avgCOVID_IgG$avg,avgControl_IgG$avg)
# making box plots
boxplot(c(avgCOVID_IgG$avg,avgControl_IgG$avg))
# making box plots
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg)
boxplot(avgCOVID_IgM,avgControl_IgM)
avgControl_IgM <- as_tibble(filter(merged_data,`Description`=="Control")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635`))
boxplot(avgCOVID_IgM,avgControl_IgM)
boxplot(avgCOVID_IgM$avg,avgControl_IgM$avg)
# making box plots
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=c('COVID_avg','Control_avg'),main="Average gene binding using IgG")
# making box plots
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = FALSE,
names=c('COVID_avg','Control_avg'),main="Average gene binding using IgG")
boxplot(avgCOVID_IgM$avg,avgControl_IgM$avg,horizontal = FALSE,
names=c('COVID_avg','Control_avg'),main="Average gene binding using IgM")
# making box plots
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=c('COVID','Control'),main="Average gene binding using IgG")
boxplot(avgCOVID_IgM$avg,avgControl_IgM$avg,horizontal = TRUE
names=c('COVID','Control'),main="Average gene binding using IgM")
boxplot(avgCOVID_IgM$avg,avgControl_IgM$avg,horizontal = TRUE,
names=c('COVID','Control'),main="Average gene binding using IgM")
text(ag_IgG_bp$group,ag_IgG_bp$out)
ag_IgG_bp <- boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average gene binding using IgG")
# making box plots
rowNames <- c('COVID','Control')
ag_IgG_bp <- boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average gene binding using IgG")
text(ag_IgG_bp$group,ag_IgG_bp$out)
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average gene binding using IgG",id.method="y")
library(ggplot2)
boxplot(log2(`F635 Median - B635`)~`Samples ID`,merged_data,
main = "Normalized IgM binding")
boxplot(`F635 Median - B635`~`Samples ID`,merged_data,
main = "Normalized IgM binding")
### Making averaged box plot
# making average by Name fluorescent values
avgCOVID_IgG <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=log2(median(`F532 Median - B532`)))
### Making averaged box plot
# making average by Name fluorescent values
avgCOVID_IgG <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(log2(`F532 Median - B532`)))
avgCOVID_IgM <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635))
avgCOVID_IgM <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635))
avgCOVID_IgM <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635`))
### Making averaged box plot
# making average by Name fluorescent values
avgCOVID_IgG <- as_tibble(filter(merged_data,`Description`=="COVID-19 patient")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F532 Median - B532`))
boxplot(log2(avgCOVID_IgG$avg),log2(avgControl_IgG$avg),horizontal = TRUE,
names=rowNames,main="Average gene binding using IgG",id.method="y")
avgControl_IgM <- as_tibble(filter(merged_data,`Description`=="Control")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635`)) %>%
if (avg > 0):
log2(avg)
View(avgControl_IgG)
avgControl_IgM <- as_tibble(filter(merged_data,`Description`=="Control")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635`)) %>%
if (avgControl_IgM$avg > 0):
log2(avgControl_IgM$avg)
View(avgControl_IgM)
avgControl_IgM <- if (avgControl_IgM$avg > 0):
log2(avgControl_IgM$avg)
View(avgCOVID_IgM)
avgControl_IgM <- if (avgControl_IgM$avg > 0):
(avgControl_IgM$avg <- log2(avgControl_IgM$avg))
View(avgCOVID_IgM)
avgControl_IgM <- if (avgControl_IgM$avg > 0){
(avgControl_IgM$avg <- log2(avgControl_IgM$avg))
}
avgControl_IgM <- as_tibble(filter(merged_data,`Description`=="Control")) %>%
group_by(`Name`) %>%
summarise(avg=median(`F635 Median - B635`))
avgControl_IgM$avg[3]
for (i in 1:94) {
print(i)
if (avgControl_IgM$avg[i] > 0){
(avgControl_IgM$avg[i] <- log2(avgControl_IgM$avg[i]))
}
if (avgControl_IgG$avg[i] > 0){
(avgControl_IgG$avg[i] <- log2(avgControl_IgG$avg[i]))
}
if (avgCOVID_IgM$avg[i] > 0){
(avgCOVID_IgM$avg[i] <- log2(avgCOVID_IgM$avg[i]))
}
if (avgCOVID_IgG$avg[i] > 0){
(avgCOVID_IgG$avg[i] <- log2(avgCOVID_IgG$avg[i]))
}
}
# making box plots
rowNames <- c('COVID','Control')
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average gene binding using IgG",id.method="y")
boxplot(avgCOVID_IgM$avg,avgControl_IgM$avg,horizontal = TRUE,
names=rowNames,main="Average gene binding using IgM")
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average binding using IgG",id.method="y")
boxplot(avgCOVID_IgM$avg,avgControl_IgM$avg,horizontal = TRUE,
names=rowNames,main="Average binding using IgM")
identify(rep(1,length(avgControl_IgG)),avgControl_IgG,labels=seq_along(avgControl_IgG))
identify(rep(1,length(avgControl_IgG$avg)),avgControl_IgG,labels=seq_along(avgControl_IgG))
identify(rep(1,length(avgControl_IgG$avg)),avgControl_IgG$avg,labels=seq_along(avgControl_IgG$Name))
identify(rep(1,length(avgControl_IgG$avg)),avgControl_IgG$avg,labels=seq_along(avgControl_IgG$Name))
IgG <- ggplot(c(avgCOVID_IgG,avgControl_IgG),aes(x=avg,y=Name)) + geom_boxplot() +
guides(fill=FALSE) + coord_flip()
IgG <- ggplot(avgCOVID_IgG,aes(x=avg,y=Name)) + ggplot(avgControl_IgG,aes(x=avg,y=Name) +
IgG <- ggplot(avgCOVID_IgG,aes(x=avg,y=Name)) + ggplot(avgControl_IgG,aes(x=avg,y=Name) +
IgG <- ggplot(avgCOVID_IgG,aes(x=avg,y=Name)) + ggplot(avgControl_IgG,aes(x=avg,y=Name)) +
geom_boxplot() +
guides(fill=FALSE) + coord_flip()
ggbetweenstats(data = avgControl_IgG, x = Name, y = avg, outlier.tagging = TRUE)
library(ggstartsplot)
install.packages("ggstartsplot")
install.packages("ggstatsplot")
library(ggstatsplot)
ggbetweenstats(data = avgControl_IgG, x = Name, y = avg, outlier.tagging = TRUE)
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average binding using IgG")
ggbetweenstats(data = avgControl_IgG, x = Name, y = avg, outlier.tagging = TRUE)
ggbetweenstats(data = avgControl_IgG, x = Name, y = avg, outlier.tagging = TRUE,outlier.labe = name)
ggbetweenstats(data = avgControl_IgG, x = Name, y = avg, outlier.tagging = TRUE,outlier.label = name)
ggbetweenstats(data = avgControl_IgG, x = `Name`, y = `avg`, outlier.tagging = TRUE,outlier.label = name)
ggbetweenstats(data = avgControl_IgG, x = avgControl_IgG$Name, y = avgControl_IgG$avg, outlier.tagging = TRUE,outlier.label = name)
boxplot(avg,data=avgControl_IgG)
boxplot(avgControl_IgG$avg)
ggbetweenstats(data = avgControl_IgG, x = avgControl_IgG$Name, y = avgControl_IgG$avg, outlier.tagging = TRUE,outlier.label = name)
ggbetweenstats(data = avgControl_IgG, x = Name, y = avg, outlier.tagging = TRUE,outlier.label = name)
ggbetweenstats(data = avgControl_IgG, y = avg, outlier.tagging = TRUE,outlier.label = name)
boplot(avgControl_IgG$avg)
boxplot(avgControl_IgG$avg)
boxplot.width.outlier.label(data = avgControl_IgG, x=Name, y = avg, outlier.tagging = TRUE,outlier.label = name)
boxplot.with.outlier.label(data = avgControl_IgG, x=Name, y = avg, outlier.tagging = TRUE,outlier.label = name)
boxplot.with.outlier.label(data = avgControl_IgG, x=NA, y = avg, outlier.tagging = TRUE,outlier.label = name)
ggbetweenstats(data = avgControl_IgG, x=NA, y = avg, outlier.tagging = TRUE,outlier.label = name)
boxplot(avg~Name,avgCOVID_IgG)
boxplot(avgCOVID_IgG$avg)
boxplot(avgCOVID_IgG$avg,avgControl_IgG$avg,horizontal = TRUE,
names=rowNames,main="Average binding using IgG", id=list(n=Inf))
avgCOVID_IgG %>% arrange(avg,desc(y))
avgCOVID_IgG %>% arrange(avg,desc(Name))
View(avgCOVID_IgG)
avgCOVID_IgG <-  arrange(avg,desc(Name))
avgCOVID_IgG %>% arrange(avg,desc(Name))
avgCOVID_IgG_ordered %>% arrange(avgCOVID_IgG$avg,desc(avgCOVID_IgG$Name))
avgCOVID_IgG_ordered <- arrange(avgCOVID_IgG$avg,desc(avgCOVID_IgG$Name))
avgCOVID_IgG <- arrange(avgCOVID_IgG$avg,desc(avgCOVID_IgG$Name))
avgCOVID_IgG <- arrange(avgCOVID_IgG$avg)
avgCOVID_IgG %>% arrange(avg,desc(Name))
avgControl_IgG %>% arrange(avg,desc(Name))
avgControl_IgG %>% arrange(avg)
avgControl_IgG %>% arrange(-avg)
avgCOVID_IgM %>% arrange(avg)
avgControl_IgG %>% arrange(avg)
avgControl_IgG %>% arrange(-avg)
